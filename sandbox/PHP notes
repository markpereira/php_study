short open tags vs php tags?
	standard tags to make it portable.

=>> Array
integer indexed collection of objects.

Associative Array
object indexed collection of objects.(index by label)
key - value pair.

=>> Null and empty:
- 'Empty' is the leading cause of bugs in PHP code.

==> Type Juggling and casting

	- String
	- int, integer
	- float
	- array
	- bool, boolean

	php website has rules around how to use this.

	<?php $count2 = (string) $count; ?><br />
	=> change takes place as it's being assigned. not a permanent assignment.
	=> using settype will allow the change of type.


==> Constants

	- useful for saving data that's fixed. i.e root location of image files 

==> Switch statements
	
	- best used for compact logic. i.e. when you know there are a certain amount of things you need to list off, use switch statements.

==> For loops, While loops and foreach loops.

	- foreach loops are tailor made for arrays.
	- use foreach loops for arrays before using other two.

==> Continue

	used inside the loop to skip the rest of the current iteration and go directly to the condition evaluation that starts the next iteration

==> Function return values

	As much as possible try to keep "echo" statements out of the function, and use "return" values instead.

==> Multiple return values.
	if you have two  return values, use an array to return both values.
	use "list" to assign array values to variables

// -- example --
	<?php 
		function add_subt($val1, $val2) {
			$add = $val1 + $val2;
			$subt = $val1 - $val2;
			return array($add, $subt); 	 <------- array
		}

		$result_array = add_subt(10,5);
		echo "Add: " . $result_array[0] . "<br />";
		echo "Subt: " . $result_array[1] . "<br />";
	?>
//	
	

==> Common Problems & Troubleshooting

	No output at all
		- try to access an HTML Page
		- check webserver is running
		- Then try to access a basic php page
		- use php info function and check configuration information
		- make sure display errors is on and configured.

	Typos
		- mispelled code
		- missing semicolon at end of line
		- missing closing braces or closing quotes (especially nesting)
		- Case sensitive variable names
		- = vs == (diffrence is "setting" vs "checking")

	Turn on Error Reporting
		- php.ini file 
			- display_errors = ON
			- error_reporting = E_ALL

		- in php code
			- ini_set ('display_errors turned ON')
			- error_reporting (E_ALL)	

		- Types of error reporting
			- 	error_reporting(E_ALL | E_STRICT);
			- 	use the ~ to omit (E_ALL & E_DEPRECATED);		
		Full list of all the error codes and predefined constants
			http://php.net/manual/en/errorfunc.constants.php	

		- Catergory of errors
			- fatal errors
				- PHP understood code but coudln't execute it
				- probably calling undefined class or function	
			
			-syntax errors
				- PHP couldn't understand or process code
				- typo, missing semicolon etc.
				- unexpected "something" ... then tells you syntax error, file, line number where it is.	line number is off by 1 line...

			- Warnings
				- PHP found a problem but was able to recover
					- maybe tried to divide by zero if you can't and may keep processing further along the code.
					- no access permissions

			- Notices
				- PHP offering advice.
				- bugs
				- sloppy programming
				- look at making adjustments

		TURN OFF ERROR REPORTING ON PRODUCTION!!		

			- logs
				- MAC OSX
					- logs to /private/var/log/apache2/error_log
				- Windows WAMP
					- logs to C:/wamp/logs/php_error.log
					- or access logs from the WAMP menu
				- Apache
					- configured in /etc/apache2/httpd.conf

			Debugging and Troubleshooting
				- echo value of the $variable;
				- print_r($array) (print a readable array)				
				- gettype($variable);
				- var_dump($variable)
					return value and type
				- get_defined_vars(); (array of defined variables)
				- debug_backtrace (); (show backtrace/stacktrace)
				- 	no internal debugger

			Third party tools
				- Xdebug
					- http://xdebug.org
				-DBG
					- http://www.php-debugger.com/dbg
				FirePHP
					- http://www.firephp/org		

==> Building Web pages with PHP
			Getting info from users
				- URL/Links GET
				- Forms			POST
				- Cookies		COOKIE

==> Super Globals
	
				- $_GET (any get request will be added to an array within the GET super global)
				- $_POST
				- $_COOKIE
				- $_SESSION

==> Encoding GET Values
		urlencode vs rawurlencode
			- rawurlencode the path (portion that comes before the '?')
			- rawurlencode is more compatible generally
			- newer and later version

			- urlencode is used on the query string (an early standard)

==> Encoding for HTML
			- htmlspecialchars()
			- htmlentities()

==> Including and requiring files
			-Include		
				-	Functions
				- Layout sections
				- Reusable HTML/PHP code
				- CSS and Javascript

		- include()
			- may not or won't error and will carry on processing
			- things like html footer... etc less important
		- require()		
			- will error and stop processing
			- things like functions
		- include_once()
		- require_once()
	- keeps code well organise whenever needed on a new page.		

==> Modifying Headers
		- add to the top of the page so it's the first thing to load.
		- you only do this when you are doing re-directs

==> Page redirection
		- 302 redirect
			-	HTTP 1.1/302 Found
			- Location: path
			- Header
				- header("Location: login.php")	
				- re-request is a second GET request.

==> Output Buffering
		- slight performance hit, but pro's outweigh the cons.
		- two ways to set this
			- php.ini file - system wide.
				- set to integer (4096)
				- check my_phpinfo.php to confirm this is now turned on with value
			- file by file basis.	 
				- ob_start() - has to come before any content.
				- ob_flush()	

==> Problems with validation logic.
		- when PHP does a comparison, it does the type juggling for you.
		- in order to compare two things that have different types.
			- string vs null: converts null to " "
			- boolean vs other: coverts other to boolean
			- number vs other: converts other to number
		- what is empty()
			- "" , 0, "0", null, false, array()
			- some developers create their own code of what their version of empty is, and use that.	
		- be careful with the basic operators. < , <= , > , >= ...  a lot of bugs get created when these have been used incorrectly.
		- && , || - rmember to use sound logic.	

==> Displaying validation errors
		- using an array key.
			if (array_key_exists($errors, "name")) {
				echo "<span class=\"error-field\">&lt;&lt;>/span>";
			}
			--> this will add a pointer to the specific error based on the value "name" or whatever it is.

==> Cookies
		- expires when you set.
		- wrong way to unset a cookie
				unset($_COOKIE["user_id"]);
			- we have to tell the user's browser to change their 
		-	Right ways
			- setcookie($name);
			- setcookie($name, null);
			- setcookie($name, $value, (time() -3600));	


==> Sessions
		- Pros
			- More storage - can store more data than a cookie. A Cookie can store up to 4000 chars maximum
			- Smaller request sizes. If it was a cookie it would be sending all 4000 chars with each request.
			- Session is only sending session ID.
			- Conceals the data values. you can only see the reference to the session id. All data is still stored on the server side.
			- More secure, Less Hackable.

		- Drawbacks	
			- Slower to access - have to get session value out of the cookie, find the file in the file system, then read the data out of the file.
			- Expire when browser is closed. (meant to be a single session)
			- Session files accumulate (have a system in place to prune back any session files that haven't been accesses within X time) add this as part of your normal system maintenance.

==> MYSQL Database
	- mysql -u root -p
		enter password
	- types of commands for database:

		-	SHOW DATABASES; 
		-	CREATE DATABASE db_name; 
		- USE db_name;
		- DROP DATABASE db_name;
		- GRANT ALL PRIVILEGES ON db_name.*
			TO 'username'@'localhost' 
			IDENTIFIED BY 'password';  -> give priveleges to specific database.
		- SHOW GRANTS FOR 'username'@'localhost'; -> show priveleges.	

	- types of commands to use on tables:	
		- SHOW TABLES;
		- CREATE TABLE table_name (
			column_name1 definition,
			column_name2 definition,
			column_name3 definition,
			options
		);
		- SHOW COLUMNS FROM table_name;
		- DROP TABLE table_name;
		- Example of creating tables in a database:
			- mysql> CREATE TABLE subjects (
			  -> id INT(11) NOT NULL AUTO_INCREMENT,
			  -> menu_name VARCHAR(30) NOT NULL,
			  -> position INT(3) NOT NULL,
			  -> visible TINYINT(1) NOT NULL,
			  -> PRIMARY KEY(id)
			  -> );

==>	CRUD
		- SQL SELECT(read)
			-	SELECT *
				- FROM table
				-	WHERE COLUMN1 = 'some_text'
				- ORDER BY column1 ASC;

		- SQL INSERT(create)
			- INSERT INTO table (column1, column2, column3)
				VALUES (val1, val2, val3);		  

		- SQL UPDATE(update)
			- UPDATE table
				SET column1 = 'some_text'
				WHERE id = 1;

		- SQL	DELETE(delete)
			- DELETE FROM table
				WHERE id = 1;
					or
				WHERE table_name = "Kevin";

		- Navigating through (some examples)

			- SELECT * FROM subjects WHERE visible = 1;
			- SELECT * FROM subjects WHERE visible = 1 ORDER BY position ASC;
			- SELECT * FROM subjects WHERE visible = 1 ORDER BY position DESC;	
			- mysql> INSERT INTO subjects (menu_name, position, visible)
    		-> VALUES ('About Widget Corp', 1, 1);	
    	- INSERT INTO subjects (menu_name, position, visible) VALUES ('Products',2, 1);
    	- SELECT * FROM subjects WHERE id=2;	
    	- SELECT menu_name, position FROM subjects WHERE visible = 1;


 ==> Database API's in PHP 
 		- MYSQL API
 			- deprecated after PHP ver 5.5
 			- only offers Procedural interface.
 		- MYSQLi - improved
 			- allows procedural and object-oriented interface
 		- PDO - PHP Data Objects
 			- configuring PDO is simple - modifying a couple of lines of code in the php.ini
 			- good idea to use PDO if looking to use other database types. i.e. postgres
 			- does not offer procedural Interface, object-oriented interface only

 		-> 'Prepared Statements' is a feature you want enabled when using PHP.
 		-> choosing your api
 			http://php.net/manual/en/mysqlinfo.api.choosing.php	

 ==> Database Interaction in Five steps:
 	1. Create a database connection
 	2. Perform database query
 	3. Use return data (if any)
 	4. Release returned data 
 	5. Close database connection

 ==> mysqli connection info
 		- mysqli_connect()
 		- mysqli_connect_errno()
 		- mysqli_connect_error()
 		- my sqli_close()

 ==> mysqli performing query of database:
 		- mysqli_query()
 		- mysqli_fetch_row() >> BEST PERFORMANCE
 			- results are in a standard array
 			- Keys are integers
 		- mysqli_fetch_assoc >> SLIGHTLY LESS PERFORMANCE THAN ABOVE
 			- results are in an associative array
 			- Keys are columns
 		- mysqli_fetch_array >> Can make memory and data set a lot larger (best to use fetch_assoc)
 			- results in either or both types of arrays
 			- MYSQL_NUM, MYSQL_ASSOC, MYSQL_BOTH
 		- mysqli_fetch_object (when working with object orientated)	 	
 		- mysqli_free_result()
 		- mysqli_insert_id()
 			- $id = mysqli_insert_id($connection);



====

Revise

1. loop inside a loop with continue - continue.php / lesson 045 towards the end
2. Scope global and local -functions_scope.php / lesson 52
